version: "2"
linters:
  default: none
  enable:
    # Common linters
    - asciicheck
    - bodyclose
    - contextcheck
    - copyloopvar
    - dupl
    - errcheck
    - errname
    - errorlint
    - exhaustive
    - forbidigo
    - forcetypeassert
    - gocritic
    - godot
    - govet
    - inamedparam
    - ineffassign
    - intrange
    - lll
    - makezero
    - mirror
    - misspell
    - mnd
    - nakedret
    - nestif
    - nilerr
    - nlreturn
    - noctx
    - nolintlint
    - nonamedreturns
    - nosprintfhostport
    - paralleltest
    - perfsprint
    - prealloc
    - predeclared
    - promlinter
    - revive
    - staticcheck
    - tagalign
    - tagliatelle
    - testifylint
    - thelper
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    - wastedassign
    - whitespace
    - wsl
    # Project linters

  settings:
    # Common settings
    staticcheck:
      checks:
        - all
        - -QF1008
    tagalign:
      align: false
      order:
        - config
        - json
        - yaml
    tagliatelle:
      case:
        rules:
          json: snake
          yaml: snake
    unused:
      field-writes-are-uses: false
      exported-fields-are-used: false
      local-variables-are-used: false
    # Project settings

  exclusions:
    generated: strict
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      # Common rules
      - linters:
          - noctx
        path: _test\.go
      - linters:
          - lll
        source: ^//go:generate
      - linters:
          - revive
        text: 'unused-parameter: parameter ''ctx'' seems to be unused, consider removing or renaming it as _'
      - linters:
          - revive
        path: (.+)_test\.go
        text: 'unused-parameter: parameter ''(.+)'' seems to be unused, consider removing or renaming it as _'
      # Project rules

formatters:
  enable:
    - gci
    - gofmt
    - gofumpt
  settings:
    gofmt:
      rewrite-rules:
        - pattern: interface{}
          replacement: any
        - pattern: a[b:len(a)]
          replacement: a[b:]
  exclusions:
    generated: strict
